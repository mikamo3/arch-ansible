#!/bin/bash
# NFS unmount management script
# Generated by Ansible - Storage Role

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if mount point is mounted
is_mounted() {
    local mount_point=$1
    mount | grep -q " ${mount_point} "
}

# Function to force unmount if necessary
force_unmount() {
    local mount_point=$1
    
    print_status "$YELLOW" "Attempting force unmount of ${mount_point}..."
    if umount -f "$mount_point" 2>/dev/null; then
        print_status "$GREEN" "✓ Force unmount successful"
        return 0
    elif umount -l "$mount_point" 2>/dev/null; then
        print_status "$YELLOW" "✓ Lazy unmount successful (will complete when no longer busy)"
        return 0
    else
        print_status "$RED" "✗ Force unmount failed"
        return 1
    fi
}

# Unmount all configured NFS shares
unmount_nfs_shares() {
    local success_count=0
    local total_count=0
    local force_mode=${1:-false}
    
{% for mount in storage.nfs_client.mounts %}
    total_count=$((total_count + 1))
    
    print_status "$YELLOW" "Unmounting {{ mount.local_path }}"
    
    # Check if mounted
    if ! is_mounted "{{ mount.local_path }}"; then
        print_status "$YELLOW" "Not mounted: {{ mount.local_path }}"
        success_count=$((success_count + 1))
        continue
    fi
    
    # Attempt normal unmount
    if umount "{{ mount.local_path }}" 2>/dev/null; then
        print_status "$GREEN" "✓ Successfully unmounted {{ mount.local_path }}"
        success_count=$((success_count + 1))
    else
        print_status "$RED" "✗ Normal unmount failed for {{ mount.local_path }}"
        
        # Try force unmount if requested or if normal unmount fails
        if [ "$force_mode" = "true" ] || [ "$force_mode" = "auto" ]; then
            if force_unmount "{{ mount.local_path }}"; then
                success_count=$((success_count + 1))
            fi
        else
            print_status "$YELLOW" "Tip: Use 'umount-nfs-shares --force' to force unmount"
        fi
    fi
{% endfor %}
    
    print_status "$YELLOW" "Unmount summary: ${success_count}/${total_count} successful"
    
    if [ "$success_count" -eq "$total_count" ]; then
        exit 0
    else
        exit 1
    fi
}

# Parse arguments
FORCE_MODE="false"
if [ $# -gt 0 ]; then
    case "$1" in
        --force|-f)
            FORCE_MODE="true"
            ;;
        --help|-h)
            echo "Usage: $(basename "$0") [--force|-f]"
            echo "  --force, -f    Force unmount using umount -f and -l options"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
fi

# Main execution
print_status "$YELLOW" "Starting NFS unmount process..."
unmount_nfs_shares "$FORCE_MODE"